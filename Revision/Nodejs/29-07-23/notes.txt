CRUD OPERATION  IN MONGOOSE METHODS 
1.save() - To save the document
2.find() - To fetch the information 
3.findOneAndUpdate() - To find the data and update it 
4.deleteOne() - To find the data and delete it 

How to count the total number of documents:
//count()
How we can do pagination:

//skip()
//limit()

what is Comparison Operator:
1.$eq - equality operator - [string] - It will compare two strings
2.$gt - greater than - [number] - Comparing number
3.$lt - less than -  [number] - Comparing number
4.$in - [array] - Checking inside the array 
========================================
List of Logical operator:
1.$and - everything should match
2.$or - any one match 
====================================
regular expression:
1.i - case insensitive 
2.^ - start symbol 
3.$ - end symbol 


Input Data:
sathis 
SATHIS 
raj sathis 
sathis kumar

example:
1.let result = await Customer.find({fullName:{$regex:/sathis/i}});
sathis 
SATHIS 
raj sathis 
sathis kumar

2.let result = await Customer.find({fullName:{$regex:/^sathis/i}});
sathis 
SATHIS 
sathis kumar

3.let result = await Customer.find({fullName:{$regex:/sathis$/i}});
sathis 
SATHIS 
raj sathis 

4.let result = await Customer.find({fullName:{$regex:/^sathis$/i}});
sathis 
SATHIS 

How to dynamic regex expression
let search = 'sathis'; //frontend data
let regex = new RegExp(`^${search}$`,"i");
let result = await Customer.find({fullName:{$regex:regex}});


Mongoose - aggregation 
//It help to read the data in optimized manner 
//It is using the concept of pipeline.
//Multiple queries we can able to read it one after another.
//aggregation need to write inside the array bracket
operation:

$project -> bringing specific set of data.
Example:
 // let result = await Employee.aggregate([{$project:{firstName:1,age:1,salary:1,_id:0}}]);
 //1 - bring that data 
 //0 - Dont bring that data 

$match-->filter
Example:
 // let result = await Employee.aggregate([
//     {$match:{firstName:'sathish',age:{$gte:25}}},
//     {$project:{firstName:1,age:1,salary:1,_id:0}}
// ])

$sort - ascending:1,descending:-1
Example:
 // let result = await Employee.aggregate([
    //     {$match:{age:{$gte:25}}},
    //     {$sort:{salary:1}},
    //     {$project:{firstName:1,age:1,salary:1,_id:0}}
    // ])


$group - 
 _id - it will bring unique data from any of the field
 $sum - it will sum up the value 
 $match - it will filter data normal match , comparsion operator ,logical operator
 $avg - finding average for particular field
 $push  - will create new array and push the value
 $dateToString - string format of date
 Example:
 //$group - It will bring unqiue value from firstName field
     // let result = await Employee.aggregate([{$group:{_id:"$firstName"}}])

    // //$group - $sum - It will bring unqiue value + for that unqiue value total salary if we have duplicate firstName it will add it together.
    // let result = await Employee.aggregate([{$group:{_id:"$firstName",totalAmount:{$sum:'$salary'}}}]);

     //$group - $match - It will bring unqiue value + for that unqiue value total salary if we have duplicate firstName it will add it together and after that it will filter the data with totalAmount:40000
     //let result = await Employee.aggregate([{$group:{_id:"$firstName",totalAmount:{$sum:'$salary'}}},{$match:{totalAmount:{$gt:40000}}}]);
    
     //$group - $avg - it will find the average field
    // let result = await Employee.aggregate([{$group:{_id:null,averageDetails:{$avg:"$salary"}}}]);

    //$group - $push - It will create one new array and it will start pushing the value.
   // let result = await Employee.aggregate([{$group:{_id:'$firstName',listSalary:{$push:'$salary'}}}]);
     
   //$group 
   //$dateToString 
   //It will bring the data for that particular date with unique value


 1.Document Middleware
   Methods 
         1.save 
         2.validate 
         3.remove 
         4.updateOne 
         5.deleteOne

2.Query Middleware 
     Methods 
           1.count 
           2.countDocuments 
           3.deleteMany 
           4.find 
           5.findOne 
           6.findOneAndDelete 
           7.findOneAndRemove 
           8.findOneAndReplace 
           9.findOneAndUpdate 
           10.update 
           11.updateOne 
           12.updateMany 
           13.findById 

3.Aggregate Middleware
           all Aggregate methods ($group,$project,$sum,$match,$dateToString)

4.Model Middleware 
        methods 
           1.insertMany


Hooks 
Save method   
    1.pre - before saving the data inside the database you want to do something
    2.post  - after saving the data inside the database you want to do something    