Javascript:
1.High Level 
   Javascript will take care of memory allocation. Just we need to focus on code.
2.Garbage-collected - (unused variables)
   Javascript will take of garbage allocation.
3.Interpreted - just in time compiler 
   //Interpreter - javascript will convert into machine code in line by line execution 
    JIT - just in time compiler - Angular/reactjs/vuejs
4.Multi-paradigm
      procedure language 
      example:
      let a = 4;
      let b = 5;
      let result = a + b;
      object oriented language 
          class Expense{
            constructor(){

            }
          }
      functional programming 
       [].find()
       [].map()
       [].filter()
5.Protottype based object-oriented
     Initial days - By using function we can create objects 
     Protottype - inheritance 
6.First class function 
       //you can pass function as argument or you can treat function as variable 
       //function as treated as variable
        let object ={
            addition:function(a, b){
                  return a+b;
            }
        }

        //function as treated as argument
        function display(a,result){
            result();
        }
        function result(){

        }
        display(34,result)
7.Dynamic
       let a = 45; 
        a = "akash";
        //Typescript static datatype 
8.single thread (memory allocation to excute the code)
     Entire javascript code is running on single thread
9.Non blocking event loop 
      Any sync and async code will not block the program execution and it is taken care by event loop
============================
Javascript Engine 
1.Call stack (program in execution)
    LIFO
    sychronouse will be excuted first inside stack
    async code will be moved to queue once it ready again will bring back that data
2.calback queue (callback function,timers,fetch)
    FIFO
3.event loop 
   infinite
4.webapi 
     DOM,timers,fetch api
5.heap 
  //array and object kept inside this memory
6.Execution context 
===========================================
Exection Context 
1.variable environment 
   let,const,var ,functions,arguments
2.scope chain 

3.this keyword 
//normal function this keyword will be created
//arrow function this keyword will not be created instead it will be borrow from parent function.
=========================================================
Scope chain 
1.Global Scope 
2.Function Scope 
3.Block Scope - (es6)
=======================================================

